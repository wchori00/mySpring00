<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<context:component-scan base-package="tommy.spring.web"></context:component-scan>
<!-- 	<bean id="log" class="tommy.spring.web.common.Log4jAdvice"></bean> -->
<!-- 	<bean id="before" class="tommy.spring.web.common.BeforeAdvice"></bean> -->
<!-- 	<bean id="afterReturning" class="tommy.spring.web.common.AfterReturningAdvice"></bean> -->
<!-- 	<bean id="afterThrowing" class="tommy.spring.web.common.AfterThrowingAdvice"></bean> -->
<!-- 	<bean id="after" class="tommy.spring.web.common.AfterAdvice"></bean> -->
	<bean id="around" class="tommy.spring.web.common.AroundAdvice"></bean>
	
	<aop:config>
		<aop:pointcut expression="execution(* tommy.spring.web..*Impl.*(..))" id="allPointcut"/>
<!-- 		<aop:pointcut expression="execution(* tommy.spring.web..*Impl.get*(..))" id="getPointcut"/> -->
<!-- 		<aop:pointcut expression="execution(* tommy.spring.web..*Impl.get*(..))" id="getPointcut"/> -->

<!-- 		<aop:aspect ref="afterThrowing"> -->
<!-- 			<aop:after-throwing method="exceptionLog" pointcut-ref="allPointcut"/> -->
<!-- 		</aop:aspect> -->
<!-- 		<aop:aspect ref="after"> -->
<!-- 			<aop:after method="finallyLog" pointcut-ref="allPointcut"/> -->
<!-- 		</aop:aspect> -->
		<aop:aspect ref="around">
			<aop:around method="aroundLog" pointcut-ref="allPointcut"/>
		</aop:aspect>
	</aop:config>
<!--	<bean id="userService" class="tommy.spring.web.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO"/>
	</bean>
	<bean id="userDAO" class="tommy.spring.web.user.impl.UserDAO"></bean> -->

<!--	<context:component-scan base-package="tommy.spring.polymorphism"></context:component-scan>
	<bean id="sonny" class="tommy.spring.polymorphism.SonySpeaker"/> -->
	<!-- @Component 어노테이션이 부여된 Class들은 자동으로 IOC Container에 Bean으로 동록이 된다 -->

<!--	<bean id="myLifeBean" class="tommy.spring.lifecycle.MyLifeBeanImpl" init-method="init">
		<property name="greeting"><value>Hello, </value></property>
	</bean>
	
	<bean class="tommy.spring.lifecycle.CustomBeanPostProcessor"/> -->

<!--	<bean id="collectionBean" class="tommy.spring.collection.CollectionBean">
		<property name="addressList"> -->
<!--			<props>
				<prop key="홍길동">율도국</prop>
				<prop key="손오공">화과산</prop>
			</props> -->

<!--			<set value-type="java.lang.String">
				<value>서울시 서초구 서초동</value>
				<value>서울시 동대문구 장안동</value>
				<value>서울시 동대문구 장안동</value>
				<value>서울시 동대문구 장안동</value>
			</set> -->
		
<!--			<map>
				<entry>
					<key><value>홍길동</value></key>
					<value>율도국</value>
				</entry>
				<entry>
					<key><value>손오공</value></key>
					<value>화과산</value>
				</entry>
			</map> -->
		
<!--			<list>
				<value>서울시 서초구 서초동</value>
				<value>서울시 동대문구 장안동</value>
			</list> -->
<!--		</property>
	</bean> -->

<!-- 	<bean id="tv" class="tommy.spring.polymorphism.SamsungTV" p:speaker-ref="sony" p:price="280000"/> -->
<!--		<constructor-arg ref="apple"></constructor-arg>
 		<constructor-arg value="3000000"></constructor-arg> -->
<!--		<property name="speaker" ref="apple"/>
		<property name="price" value="3000000"/>
	</bean>-->
<!-- 	<bean id="sony" class="tommy.spring.polymorphism.SonySpeaker"/> -->
<!-- 	<bean id="apple" class="tommy.spring.polymorphism.AppleSpeaker"/> -->
	<!-- init-method="start" destroy-method="stop"-->
	<!-- scope="singleton"-->
	<!-- scope="prototype"-->

</beans>
